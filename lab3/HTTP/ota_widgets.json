{
  widgetsBundle {
    alias ota_for_esp32_widget22,
    title OTA widgets,
    image null
  },
  widgetTypes [
    {
      alias esp32,
      name ESP32_OTA_widget,
      descriptor {
        type latest,
        sizeX 7,
        sizeY 4,
        resources [],
        templateHtml form class=ota-config-formrn      name=esp32OtaUpdateConfigFormrn      ng-submit=updateOtaConfig()rn    div style=margin 15px 0;rn        div class=shared-attr-containerrn            md-input-container ng-class={'show-label' settings.showLabel} class=attr-inputrn                labelTarget firmware versionlabelrn                input name=targetFwVerrn                       ng-model=targetFwVerrn            md-input-containerrn            md-input-container ng-class={'show-label' settings.showLabel} class=attr-inputrn                labelFirmware server URLlabelrn                input name=targetFwUrlrn                       ng-model=targetFwUrlrn            md-input-containerrn        divrnrn        div class=start-otarn            md-button type=submitrn                       class=md-primary md-raisedrn                       ng-disabled=!targetFwUrl  !targetFwVerrn                span style=font-size 13px;Start OTAspanrn            md-buttonrn        divrn    divrnform,
        templateCss .ota-config-form {rn    overflow hidden; rn    height 100%;rn    display flex;rn    flex-direction column;rn}rnrn.shared-attr-container {rn  margin-top 20px;rn  display flex;rn  flex-direction column;rn}rnrn.attr-input {rn  font-size 13px;rn  margin 0 15px;rn}rnrninput {rn  font-size 13px;rn}rnrn.start-ota {rn  font-size 13px;rn  margin 0 15px;rn  display flex;rn  justify-content flex-start;rn}rnrnmd-toast{rn    min-width 0;rn}rnmd-toast .md-toast-content {rn    font-size 13px!important;rn}rnrnrnrnrnrnrnrnrnrnrnrnrnrnrnrnrnrn,
        controllerScript let attributeService;nlet toast;nlet types;nlet utils;nlet settings;nlet datasource;nlet subscription;nnself.onInit = function () {n    $scope = self.ctx.$scope;n    toast = $scope.$injector.get('toast');n    types = $scope.$injector.get('types');n    utils = $scope.$injector.get('utils');n    settings = angular.copy(self.ctx.settings)  {};n    datasource = self.ctx.datasources[0];n    subscription = self.ctx.defaultSubscription;n    $scope.settings = settings;n    n    attributeService = $scope.$injector.get('attributeService');n    $scope.updateOtaConfig = updateOtaConfig;nn    $scope.activeVal = false;n    $scope.fwStateVal = undefined;n    $scope.currentFwVal = undefined;n    $scope.lastTargetFwVer = undefined;n    $scope.lastTargetFwUrl = undefined;n    $scope.lastOtaStartedOn = undefined;n};nnself.onDataUpdated = function () {n    for (let i=0;isubscription.data.length;i++) {n        let attributeValue = subscription.data[i].data[0][1];n        let dataKey = subscription.data[i].dataKey.name;n        console.log(`${dataKey}  ${attributeValue}`);n        if (dataKey === 'active') {n            $scope.activeVal = (attributeValue === 'true');n        }n    }n};nnself.onResize = function () {n};nnself.onDestroy = function () {n};nnfunction updateOtaConfig() {n    $scope.lastTargetFwVer = $scope.targetFwVer;n    $scope.lastTargetFwUrl = $scope.targetFwUrl;n    saveShareAttributes();n    saveServerAttributes();n}nnfunction saveShareAttributes() {n    attributeService.saveEntityAttributes(n        datasource.entityType,n        datasource.entityId,n        types.attributesScope.shared.value,n        [n            {n                key targetFwVer,n                value $scope.targetFwVern            },n            {n                key targetFwUrl,n                value $scope.targetFwUrln            }n        ]n    ).then(n        function success() {n            $scope.targetFwVer = undefined;n            $scope.targetFwUrl = undefined;nn            if ($scope.activeVal) {n                toast.showSuccess('OTA configuration saved', 2000, angular.element(self.ctx.$container), 'bottom right');n            } else {n                toast.showError('OTA configuration saved,nbut will be sent when device become connected', angular.element(self.ctx.$container), 'bottom right');n            }n        },n        function fail() {n            console.log();n            toast.showError('OTA configuration can not be saved', angular.element(self.ctx.$container), 'bottom right');n        }n    );n}nnfunction saveServerAttributes() {n    $scope.lastOtaStartedOn = Date.now();n    n    attributeService.saveEntityAttributes(n        datasource.entityType,n        datasource.entityId,n        types.attributesScope.server.value,n        [n            {n                key lastTargetFwVer,n                value $scope.lastTargetFwVern            },n            {n                key lastTargetFwUrl,n                value $scope.lastTargetFwUrln            },n            {n                key lastOtaStartedOn,n                value $scope.lastOtaStartedOnn            }n        ]n    );n}nnself.typeParameters = function () {n    return {n        dataKeysOptional true,n        maxDatasources 1n    };n};n,
        settingsSchema {},
        dataKeySettingsSchema {}n,
        defaultConfig {datasources[{typefunction,namefunction,dataKeys[{namef(x),typefunction,labelRandom,color#2196f3,settings{},_hash0.15479322438769105,funcBodyvar value = prevValue + Math.random()  100 - 50;nvar multiplier = Math.pow(10, 2  0);nvar value = Math.round(value  multiplier)  multiplier;nif (value  -1000) {ntvalue = -1000;n} else if (value  1000) {ntvalue = 1000;n}nreturn value;}]}],timewindow{realtime{timewindowMs60000}},showTitletrue,backgroundColor#fff,colorrgba(0, 0, 0, 0.87),padding8px,settings{},titleESP32_OTA_widget}
      }
    }
  ]
}